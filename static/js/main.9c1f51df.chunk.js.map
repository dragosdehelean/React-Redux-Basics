{"version":3,"sources":["components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","containers/Counter/Counter.js","store/actionTypes.js","App.js","registerServiceWorker.js","store/reducer.js","index.js"],"names":["counterControl","props","react_default","a","createElement","className","onClick","clicked","label","counterOutput","value","Counter","_this","this","CounterOutput_CounterOutput","ctr","CounterControl_CounterControl","onIncrement","onDecrement","onAdd","onSubstract","onStoreResult","storedResults","map","result","onDeleteResult","id","key","Component","connect","state","counter","results","dispatch","type","resultId","App","containers_Counter_Counter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","reducer","arguments","length","undefined","action","Object","objectSpread","concat","toConsumableArray","Date","filter","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"iTAUeA,SANQ,SAACC,GAAD,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,QAASL,EAAMM,SAC1CN,EAAMO,SCIAC,SANO,SAACR,GAAD,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,oBACsBJ,EAAMS,SCC1BC,mLACO,IAAAC,EAAAC,KACL,OACIX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACU,EAAD,CAAeJ,MAAOG,KAAKZ,MAAMc,MACjCb,EAAAC,EAAAC,cAACY,EAAD,CAAgBR,MAAM,YAAYD,QAASM,KAAKZ,MAAMgB,cACtDf,EAAAC,EAAAC,cAACY,EAAD,CAAgBR,MAAM,YAAYD,QAASM,KAAKZ,MAAMiB,cACtDhB,EAAAC,EAAAC,cAACY,EAAD,CAAgBR,MAAM,QAAQD,QAASM,KAAKZ,MAAMkB,QAClDjB,EAAAC,EAAAC,cAACY,EAAD,CAAgBR,MAAM,aAAaD,QAASM,KAAKZ,MAAMmB,cACvDlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQE,QAASO,KAAKZ,MAAMoB,eAA5B,gBACAnB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACTQ,KAAKZ,MAAMqB,cAAcC,IAAI,SAAAC,GAAM,OAChCtB,EAAAC,EAAAC,cAAA,MAAIE,QAAS,kBAAIM,EAAKX,MAAMwB,eAAeD,EAAOE,KAAKC,IAAKH,EAAOE,IAAKF,EAAOd,MAA/E,iCAbFkB,aAwCPC,cAlBS,SAAAC,GACpB,MAAO,CACHf,IAAKe,EAAMC,QACXT,cAAeQ,EAAME,UAIF,SAAAC,GACvB,MAAO,CACHhB,YAAa,kBAAKgB,EAAS,CAACC,KCtCX,eDuCjBhB,YAAa,kBAAKe,EAAS,CAACC,KCtCX,eDuCjBf,MAAO,kBAAKc,EAAS,CAACC,KCtCZ,MDsCmCxB,MAAO,KACpDU,YAAa,kBAAKa,EAAS,CAACC,KCtCX,YDsCwCxB,MAAO,KAChEW,cAAe,kBAAIY,EAAS,CAACC,KCtCT,kBDuCpBT,eAAgB,SAACC,GAAD,OAAMO,EAAS,CAACC,KCtCX,gBDsC4CC,SAAUT,OAIpEG,CAA6ClB,GEhC7CyB,0LARX,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACiC,EAAD,cAJWT,cCKZU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtB,QACfgB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,+BCpE3DC,EAAe,CACjB7B,QAAS,EACTC,QAAS,IA0BE6B,EAvBC,WAAkC,IAAjC/B,EAAiCgC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQC,EAAO/B,MACX,IHTiB,YGUb,OAAOgC,OAAAC,EAAA,EAAAD,CAAA,GAAKpC,EAAZ,CAAmBC,QAASD,EAAMC,QAAU,IAChD,IHViB,YGWb,OAAOmC,OAAAC,EAAA,EAAAD,CAAA,GAAKpC,EAAZ,CAAmBC,QAASD,EAAMC,QAAU,IAChD,IHXU,MGYN,OAAOmC,OAAAC,EAAA,EAAAD,CAAA,GAAKpC,EAAZ,CAAmBC,QAASD,EAAMC,QAAUkC,EAAOvD,QACvD,IHZiB,YGab,OAAOwD,OAAAC,EAAA,EAAAD,CAAA,GAAKpC,EAAZ,CAAmBC,QAASD,EAAMC,QAAUkC,EAAOvD,QACvD,IHboB,eGchB,OAAOwD,OAAAC,EAAA,EAAAD,CAAA,GACApC,EADP,CAEIE,QAAO,GAAAoC,OAAAF,OAAAG,EAAA,EAAAH,CAAMpC,EAAME,SAAZ,CAAqB,CAACN,GAAI,IAAI4C,KAAQ5D,MAAOoB,EAAMC,aAClE,IHhBqB,gBGiBjB,OAAOmC,OAAAC,EAAA,EAAAD,CAAA,GAAIpC,EAAX,CACIE,QAASF,EAAME,QAAQuC,OAAQ,SAAA/C,GAAM,OAAIA,EAAOE,KAAOuC,EAAO9B,aAEtE,QACI,OAAOL,ICjBb0C,EAAQC,YAAYZ,GAG1Ba,IAASC,OACLzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAUJ,MAAOA,GACbtE,EAAAC,EAAAC,cAACyE,EAAD,OACSC,SAASC,eAAe,SFK1B,WACb,GAA6C,kBAAmBjC,UAAW,CAGzE,GADkB,IAAIkC,IAAIC,sBAAwBzC,OAAOC,UAC3CyC,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAO2C,iBAAiB,OAAQ,WAC9B,IAAMtC,EAAK,GAAAuB,OAAMa,sBAAN,sBAEN3C,EAwCX,SAAiCO,GAE/BuC,MAAMvC,GACHI,KAAK,SAAAoC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3C,UAAUC,cAAc2C,MAAMzC,KAAK,SAAAC,GACjCA,EAAayC,aAAa1C,KAAK,WAC7BT,OAAOC,SAASmD,aAKpBhD,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAzDAoC,CAAwBhD,GAHxBD,EAAgBC,MEpBxBiD","file":"static/js/main.9c1f51df.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CounterControl.css';\n\nconst counterControl = (props) => (\n    <div className=\"CounterControl\" onClick={props.clicked}>\n        {props.label}\n    </div>\n);\n\nexport default counterControl;","import React from 'react';\n\nimport './CounterOutput.css';\n\nconst counterOutput = (props) => (\n    <div className=\"CounterOutput\">\n        Current Counter: {props.value}\n    </div>\n);\n\nexport default counterOutput;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport * as actionTypes from '../../store/actionTypes';\n\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\n\nclass Counter extends Component {\n    render() {\n        return (\n            <div>\n                <CounterOutput value={this.props.ctr} />\n                <CounterControl label=\"Increment\" clicked={this.props.onIncrement} />\n                <CounterControl label=\"Decrement\" clicked={this.props.onDecrement} />\n                <CounterControl label=\"Add 5\" clicked={this.props.onAdd} />\n                <CounterControl label=\"Subtract 5\" clicked={this.props.onSubstract} />\n                <hr />\n                <button onClick={this.props.onStoreResult}>Save Results</button>\n                <ul className=\"results\">\n                    {this.props.storedResults.map(result=>(\n                        <li onClick={()=>this.props.onDeleteResult(result.id)} key={result.id}>{result.value} (click to delete)</li>\n                    ))}                    \n                </ul>\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ctr: state.counter,\n        storedResults: state.results\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIncrement: ()=> dispatch({type: actionTypes.INCREMENT}),\n        onDecrement: ()=> dispatch({type: actionTypes.DECREMENT}),\n        onAdd: ()=> dispatch({type: actionTypes.ADD, value: 5}),\n        onSubstract: ()=> dispatch({type: actionTypes.SUBSTRACT, value: 5}),\n        onStoreResult: ()=>dispatch({type: actionTypes.STORE_RESULT}),\n        onDeleteResult: (id)=>dispatch({type: actionTypes.DELETE_RESULT, resultId: id}),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","export const INCREMENT = 'INCREMENT';\r\nexport const DECREMENT = 'DECREMENT';\r\nexport const ADD ='ADD';\r\nexport const SUBSTRACT = 'SUBSTRACT';\r\nexport const STORE_RESULT = 'STORE_RESULT';\r\nexport const DELETE_RESULT = 'DELETE_RESULT';","import React, { Component } from 'react';\n\nimport Counter from './containers/Counter/Counter';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    counter: 0,\r\n    results: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.INCREMENT: \r\n            return { ...state, counter: state.counter + 1 };\r\n        case actionTypes.DECREMENT:\r\n            return { ...state, counter: state.counter - 1 };\r\n        case actionTypes.ADD:\r\n            return { ...state, counter: state.counter + action.value };\r\n        case actionTypes.SUBSTRACT:\r\n            return { ...state, counter: state.counter - action.value };\r\n        case actionTypes.STORE_RESULT:\r\n            return { \r\n                ...state,\r\n                results: [...state.results, {id: new Date(), value: state.counter}] };\r\n        case actionTypes.DELETE_RESULT:\r\n            return {...state,\r\n                results: state.results.filter( result => result.id !== action.resultId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}