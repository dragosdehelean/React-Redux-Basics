{"version":3,"sources":["components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","containers/Counter/Counter.js","App.js","registerServiceWorker.js","store/reducer.js","index.js"],"names":["counterControl","props","react_default","a","createElement","className","onClick","clicked","label","counterOutput","value","Counter","state","counter","counterChangedHandler","action","_this","setState","prevState","CounterOutput_CounterOutput","this","ctr","CounterControl_CounterControl","onIncrement","onDecrement","onAdd","onSubstract","Component","connect","dispatch","type","App","containers_Counter_Counter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","reducer","arguments","length","undefined","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"iTAUeA,SANQ,SAACC,GAAD,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,QAASL,EAAMM,SAC1CN,EAAMO,SCIAC,SANO,SAACR,GAAD,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,oBACsBJ,EAAMS,SCA1BC,6MACFC,MAAQ,CACJC,QAAS,KAGbC,sBAAwB,SAACC,EAAQL,GAC7B,OAAQK,GACJ,IAAK,MACDC,EAAKC,SAAS,SAACC,GAAgB,MAAO,CAAEL,QAASK,EAAUL,QAAU,KACrE,MACJ,IAAK,MACDG,EAAKC,SAAS,SAACC,GAAgB,MAAO,CAAEL,QAASK,EAAUL,QAAU,KACrE,MACJ,IAAK,MACDG,EAAKC,SAAS,SAACC,GAAgB,MAAO,CAAEL,QAASK,EAAUL,QAAUH,KACrE,MACJ,IAAK,MACDM,EAAKC,SAAS,SAACC,GAAgB,MAAO,CAAEL,QAASK,EAAUL,QAAUH,KACrE,MACJ,QACI,OAAOA,4EAKf,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAD,CAAeT,MAAOU,KAAKnB,MAAMoB,MACjCnB,EAAAC,EAAAC,cAACkB,EAAD,CAAgBd,MAAM,YAAYD,QAASa,KAAKnB,MAAMsB,cACtDrB,EAAAC,EAAAC,cAACkB,EAAD,CAAgBd,MAAM,YAAYD,QAASa,KAAKnB,MAAMuB,cACtDtB,EAAAC,EAAAC,cAACkB,EAAD,CAAgBd,MAAM,QAAQD,QAASa,KAAKnB,MAAMwB,QAClDvB,EAAAC,EAAAC,cAACkB,EAAD,CAAgBd,MAAM,aAAaD,QAASa,KAAKnB,MAAMyB,sBA/BjDC,aAoDPC,cAfS,SAAAhB,GACpB,MAAO,CACHS,IAAKT,EAAMC,UAIQ,SAAAgB,GACvB,MAAO,CACHN,YAAa,kBAAKM,EAAS,CAACC,KAAM,eAClCN,YAAa,kBAAKK,EAAS,CAACC,KAAM,eAClCL,MAAO,kBAAKI,EAAS,CAACC,KAAM,MAAOpB,MAAO,KAC1CgB,YAAa,kBAAKG,EAAS,CAACC,KAAM,YAAapB,MAAO,OAI/CkB,CAA6CjB,GC3C7CoB,0LARX,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAC4B,EAAD,cAJWL,cCKZM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnC,QACf6B,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,uBCtE3DC,EAAe,CACjB1C,QAAS,GAmBE2C,EAhBC,WAAkC,IAAjC5C,EAAiC6C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcxC,EAAW0C,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQ5C,EAAOe,MACX,IAAK,YACD,OAAO8B,OAAAC,EAAA,EAAAD,CAAA,GAAKhD,EAAZ,CAAmBC,QAASD,EAAMC,QAAU,IAChD,IAAK,YACD,OAAO+C,OAAAC,EAAA,EAAAD,CAAA,GAAKhD,EAAZ,CAAmBC,QAASD,EAAMC,QAAU,IAChD,IAAK,MACD,OAAO+C,OAAAC,EAAA,EAAAD,CAAA,GAAKhD,EAAZ,CAAmBC,QAASD,EAAMC,QAAUE,EAAOL,QACvD,IAAK,YACD,OAAOkD,OAAAC,EAAA,EAAAD,CAAA,GAAKhD,EAAZ,CAAmBC,QAASD,EAAMC,QAAUE,EAAOL,QACvD,QACI,OAAOE,ICNbkD,EAAQC,YAAYP,GAG1BQ,IAASC,OACL/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAUJ,MAAOA,GACb5D,EAAAC,EAAAC,cAAC+D,EAAD,OACSC,SAASC,eAAe,SFK1B,WACb,GAA6C,kBAAmB5B,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,sBAAwBpC,OAAOC,UAC3CoC,SAAWrC,OAAOC,SAASoC,OAIvC,OAGFrC,OAAOsC,iBAAiB,OAAQ,WAC9B,IAAMjC,EAAK,GAAAkC,OAAMH,sBAAN,sBAENtC,EAwCX,SAAiCO,GAE/BmC,MAAMnC,GACHI,KAAK,SAAAgC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CvC,UAAUC,cAAcuC,MAAMrC,KAAK,SAAAC,GACjCA,EAAaqC,aAAatC,KAAK,WAC7BT,OAAOC,SAAS+C,aAKpB5C,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAzDAgC,CAAwB5C,GAHxBD,EAAgBC,MEpBxB6C","file":"static/js/main.3682c154.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CounterControl.css';\n\nconst counterControl = (props) => (\n    <div className=\"CounterControl\" onClick={props.clicked}>\n        {props.label}\n    </div>\n);\n\nexport default counterControl;","import React from 'react';\n\nimport './CounterOutput.css';\n\nconst counterOutput = (props) => (\n    <div className=\"CounterOutput\">\n        Current Counter: {props.value}\n    </div>\n);\n\nexport default counterOutput;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\n\nclass Counter extends Component {\n    state = {\n        counter: 0\n    }\n\n    counterChangedHandler = (action, value) => {\n        switch (action) {\n            case 'inc':\n                this.setState((prevState) => { return { counter: prevState.counter + 1 } })\n                break;\n            case 'dec':\n                this.setState((prevState) => { return { counter: prevState.counter - 1 } })\n                break;\n            case 'add':\n                this.setState((prevState) => { return { counter: prevState.counter + value } })\n                break;\n            case 'sub':\n                this.setState((prevState) => { return { counter: prevState.counter - value } })\n                break;\n            default:\n                return value;\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <CounterOutput value={this.props.ctr} />\n                <CounterControl label=\"Increment\" clicked={this.props.onIncrement} />\n                <CounterControl label=\"Decrement\" clicked={this.props.onDecrement} />\n                <CounterControl label=\"Add 5\" clicked={this.props.onAdd} />\n                <CounterControl label=\"Subtract 5\" clicked={this.props.onSubstract} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ctr: state.counter,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIncrement: ()=> dispatch({type: \"INCREMENT\"}),\n        onDecrement: ()=> dispatch({type: \"DECREMENT\"}),\n        onAdd: ()=> dispatch({type: \"ADD\", value: 5}),\n        onSubstract: ()=> dispatch({type: \"SUBSTRACT\", value: 5}),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","import React, { Component } from 'react';\n\nimport Counter from './containers/Counter/Counter';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    counter: 0\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return { ...state, counter: state.counter + 1 };\r\n        case 'DECREMENT':\r\n            return { ...state, counter: state.counter - 1 };\r\n        case 'ADD':\r\n            return { ...state, counter: state.counter + action.value };\r\n        case 'SUBSTRACT':\r\n            return { ...state, counter: state.counter - action.value };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}